### Benson Pan
### July 23 2016

## large primes (note: generated with maple)
p = long(8403137884944724689823088439871468308046940845506175798986430763913243765244796771230198323923940901114816026893222476972608181434979212515277742820412112090763028058834838818406845526376166191954045896223990686817806385275991732471920165836302483826919154176090907799323444237016622068562298100906313);
q = long(4617311143849834841587151204565131678599901659074154413571236876283981328235551727104994594537655784098644685939128092410087299727409194370288193932005251259063522823036063156438825810344322812347297766830340600406961892541544874733485278946120981324664487580537418164514447010123080447780456191633967);
n = p * q; # n = 38799902199462008602674353883929782782446996347307104928178141546652881768822720188840885899200639782176084215066559871171174015752066321796220965423706372752281951014519067809747752952998166433554543541750302712266769454149900551301083386004837784385406704678464280065368206487861044951645417875725389385723914955408469977346867866205294739921666515408979449761695344189702626689479769473917132023952225516354466236448719608465313974462670300465580744877580561612675796348902319862688585183727335552049020954328082759947661983384378240786253413302433041191758726874555346506318974142020131971055533671
O = (p-1) * (q-1); # o = 38799902199462008602674353883929782782446996347307104928178141546652881768822720188840885899200639782176084215066559871171174015752066321796220965423706372752281951014519067809747752952998166433554543541750302712266769454149900551301083386004837784385406704678464280065368206487861044951645417875725376365274886160848938567107223429605308093079161935078766892094055146964609146340981434280998670427267012055641633885879336912984151586055784734528828327514230735061793925446927474191351864694723034208385966623040857991669844446777172835341470989837281457550002098548591508615071834439503789216762993392
e = long(5202109697864776409541976782103338232025384387012730284052273499589686158630707944287706342993058627619759464549823893347551559168378518010851645736751347279291478046026839892295081474147292976771547125672820703833520404119311833284048424973392673152532033591517797977416747439538227270094896351850481);
d = long(15141738003834769717051483164689066080371400455485120579781659454461898095601964132325969211496187514217406516100995541735897107886086465572143877450111405731888593387805383842607216439090200733029397355434700068772128119935109724808715075253064258482315311778773478255134761482927511014740049409230848575303006551388561061882308047453391427819318388395378654576477567434051748320683795440164970845777841978762976621802500306274041460141015039683572092047598155762771080406965569963033899992943333895173343675659163203337287225196659568124555123060411539287116664544217061568029740926084912278867669921);

## Martin's Keys
martin_n = long(239255299284384349304725149856552492038598445886956658797340414572081315025316855599003056773010145489861807217942474066769254994889937350554812114599199747011822931003470188469755565575428252755498450043694308433269873821720504733262583005940196298951811543171416951549542705533417999736765774452030314635913103516225119401185982005668156650192848448135779911780427770251154346413709247810959979685820122190878080140819951259653464493002404315741219936122712441337048287859676453307655235582246940129654549936418104588280142515645148689690033053995534499764950491215574658031050257809925263610106291);
martin_e = long(51831672085074814178680269722598016921936838558306727005991561731670505910386509866184899294113023750765710594543251856658239666016521056714215727353889825219309912019100396570607753922542886645209401533085461587994461683838141339926725638136349726690307472237142348752101995510115124409635193574780938087738364459858781987481597603026016849697794677);

def square_multiply(operand, exponent, modulo):
	table = [];
	table.append(operand);
	expo = exponent;
	simplified = 1;

	while 2**len(table) < expo:
		table.append(table[-1]**2 % modulo);

	for i in range(len(table) - 1, -1, -1):
		if 2**i <= expo:
			simplified = simplified * table[i] % modulo;
			expo = expo - 2 ** i;

	return simplified;

def encode():
	message = raw_input("Please enter message:\n");
	ascii_message = long("".join([("000"+str(ord(elem)))[-3:] for elem in message]));
	print square_multiply(ascii_message, e, n);

def decode():
	cipher = raw_input("Please enter cipher:\n");
	data = str(square_multiply(long(cipher), d, n));
	message = [];
	while len(data) > 0:
		message.append(chr(int(data[-3:])));
		data = data[:-3];
	message.reverse();
	print "".join(message);

input = raw_input("Menu\n(1)Encode\n(2)Decode\nPlease select 1 or 2:");
if input == "1":
	encode();
else:
	decode();
